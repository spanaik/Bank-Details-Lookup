{"version":3,"sources":["constants/action-types.js","reducers/index.js","util/bankDetails.js","middleware/index.js","store/index.js","util/LocalStorage.js","components/SearchBar.js","actions/index.js","components/BanksList.js","components/Paginate/Paginate.js","App.js","serviceWorker.js","index.js"],"names":["FILTER_DATA","FILTERED_DATA","DATA_REQUESTED","DATA_LOADED","DATA_ERROR","PAGINATE_DATA","PAGINATED_DATA","LOAD_FAV_DATA","FAV_DATA","CLEAR_DATA","initialState","bankDetails","favData","filteredData","dataToDisplay","rootReducer","state","arguments","length","undefined","action","type","Object","assign","payload","search","city","toUpperCase","URI","concat","fetch","cache","then","response","json","jsonResponse","map","bank","ifsc","id","bank_id","name","bank_name","branch","address","district","filterList","filterTerm","List","lowerCasedFilter","toLowerCase","filter","item","keys","some","key","includes","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","_ref","getState","dispatch","next","_ref2","banks","catch","error","console","log","message","_ref3","indexOfLastItem","currentPage","itemsPerPage","indexOfFirstItem","list","slice","thunk","isLocalStorageSupported","localStorage","setItem","removeItem","e","code","DOMException","QUOTA_EXCEEDED_ERR","LocalStorage","getItem","value","cities","Favourite","Kolkatta","Bangalore","Delhi","Mumbai","Chennai","ConnectedSearchBar","changeOnDebounce","debounce","_this","props","filterData","handleChange","event","_event$target","target","setState","defineProperty","requestData","clearData","renderCityOptions","cityValue","react_default","a","createElement","className","this","onChange","placeholder","React","Component","SearchBar","connect","ConnectedList","isFavBank","favList","i","handleClick","preventDefault","targetIfsc","favListFromLS","JSON","parse","matchingBank","index","findIndex","splice","push","pushFavData","jsonString","stringify","renderBankList","bankList","toRender","onClick","_this$props","favBanks","BanksList","ConnectedPaginate","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","paginateData","handleItemChange","Number","handlePageClick","page","selected","nextProps","dataCount","pageCount","Math","ceil","dist_default","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","breakClassName","breakLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","pageClassName","pageLinkClassName","activeClassName","Paginate","ConnectedApp","_this2","loadFavData","components_SearchBar","Paginate_Paginate","components_BanksList","App","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e6c68c08.chunk.js","sourcesContent":["export const FILTER_DATA = \"FILTER_DATA\"\nexport const FILTERED_DATA = \"FILTERED_DATA\"\nexport const DATA_REQUESTED = \"DATA_REQUESTED\"\nexport const DATA_LOADED = \"DATA_LOADED\"\nexport const DATA_ERROR = \"DATA_ERROR\"\nexport const PAGINATE_DATA = \"PAGINATE_DATA\"\nexport const PAGINATED_DATA = \"PAGINATED_DATA\"\nexport const LOAD_FAV_DATA = \"LOAD_FAV_DATA\"\nexport const FAV_DATA = \"FAV_DATA\"\nexport const CLEAR_DATA = \"CLEAR_DATA\"\n\n","import { FILTERED_DATA, DATA_LOADED, DATA_ERROR, PAGINATED_DATA, FAV_DATA, CLEAR_DATA, LOAD_FAV_DATA } from \"../constants/action-types\"\n\nconst initialState = {\n    bankDetails : [],\n    favData: [],\n    filteredData : [],\n    dataToDisplay : []\n}\n\nfunction rootReducer(state = initialState, action) {\n    \n    if (action.type === DATA_LOADED) {\n        return Object.assign({}, state, {bankDetails: action.payload, filteredData: action.payload})\n    }\n    else if (action.type === FILTERED_DATA) {\n        return Object.assign({}, state, {filteredData: action.payload})\n    }\n    else if (action.type === DATA_ERROR) {\n        return Object.assign({}, state, {dataToDisplay: action.payload})\n    }\n    else if (action.type === PAGINATED_DATA) {\n        return Object.assign({}, state, {dataToDisplay: action.payload})\n    }\n    else if (action.type === LOAD_FAV_DATA) {\n        return Object.assign({}, state, {favData: action.payload, filteredData: action.payload, bankDetails: action.payload})\n    }\n    else if (action.type === FAV_DATA) {\n        return Object.assign({}, state, {favData: action.payload})\n    }\n    else if (action.type === CLEAR_DATA) {\n        return Object.assign({}, state, { filteredData: state.favData})\n    }\n\n    return state\n}\n\nexport default rootReducer","const bankDetails = {\n    search : (city) => {\n        city = city.toUpperCase()\n        const URI = `https://vast-shore-74260.herokuapp.com/banks?city=${city}`\n        return fetch(URI, \n            {\n                cache: 'force-cache'\n            })\n        .then( response => response.json())\n        .then( jsonResponse => {\n            if (jsonResponse) {\n                return jsonResponse.map( bank => {\n                    return {\n                        ifsc: bank.ifsc,\n                        id: bank.bank_id,\n                        name: bank.bank_name,\n                        branch: bank.branch,\n                        address: bank.address,\n                        city: bank.city,\n                        district: bank.district,\n                        state: bank.state\n                    }\n                })\n            }\n        })\n    }\n}\n\nexport default bankDetails;","import { FILTER_DATA, DATA_REQUESTED, DATA_LOADED, FILTERED_DATA, DATA_ERROR, PAGINATED_DATA, PAGINATE_DATA } from '../constants/action-types'\nimport bankDetails from \"../util/bankDetails\"\n\nconst filterList = (filterTerm, List) => {\n    const lowerCasedFilter = filterTerm.toLowerCase()\n    return List.filter(item => {\n        return Object.keys(item).some(key => \n            typeof item[key] === \"string\" && item[key].toLowerCase().includes(lowerCasedFilter))\n    })\n}\n\nexport function filterListMiddleware({ getState, dispatch }) {\n    return function(next) {\n        return function(action) {\n            if (action.type === FILTER_DATA) {\n                const filteredData = filterList(action.payload, getState().bankDetails)\n                dispatch({ type: FILTERED_DATA, payload: filteredData })\n            }\n            return next(action)\n        }\n    }\n}\n\nexport function dataRequestedMiddleware({ dispatch }) {\n    return function(next) {\n        return function(action) {\n            if (action.type === DATA_REQUESTED) {\n                bankDetails.search(action.payload)\n                            .then( banks => {\n                                dispatch({ type: DATA_LOADED, payload: banks})\n                            })\n                            .catch( error => {\n                                console.log(error.message)\n                                dispatch({ type: DATA_ERROR, payload: {\"error\": \"Error Loading Data\"}})\n                            })\n            }\n            return next(action)\n        }\n    }\n}\n\nexport function paginateDataMiddleware({ getState, dispatch }) {\n    return function(next) {\n        return function(action) {\n            if (action.type === PAGINATE_DATA) {\n                const indexOfLastItem = (action.payload.currentPage + 1) * action.payload.itemsPerPage\n                const indexOfFirstItem = indexOfLastItem - action.payload.itemsPerPage\n                const list = getState().filteredData.slice(indexOfFirstItem, indexOfLastItem)\n                \n                dispatch({ type: PAGINATED_DATA, payload: list })\n            }\n            return next(action)\n        }\n    }\n}","import { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from '../reducers/index'\nimport { filterListMiddleware, dataRequestedMiddleware, paginateDataMiddleware } from \"../middleware/index\"\nimport thunk from 'redux-thunk'\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    rootReducer,\n    storeEnhancers(applyMiddleware(filterListMiddleware, dataRequestedMiddleware, paginateDataMiddleware, thunk))\n)\n\nexport default store","const LS_TEST_KEY = 'ls-test';\nlet isLocalStorageSupported = typeof localStorage === 'object';\n \n// Try to\ntry {\n  localStorage.setItem(LS_TEST_KEY, 'test');\n  localStorage.removeItem(LS_TEST_KEY);\n} catch (e) {\n  isLocalStorageSupported = false;\n \n  // If we get error that we exceeded storage's quota\n  // but storage is still empty we are in private mode\n  if (e.code === DOMException.QUOTA_EXCEEDED_ERR && localStorage.length === 0) {\n    // Private mode\n  } else {\n    throw e;\n  }\n}\n \nconst LocalStorage = {\n  getItem: (key) => {\n    if (isLocalStorageSupported) {\n      return localStorage.getItem(key);\n    }\n \n    return null;\n  },\n \n  setItem: (key, value) => {\n    if (isLocalStorageSupported) {\n      localStorage.setItem(key, value);\n    }\n  },\n \n  removeItem: (key) => {\n    if (isLocalStorageSupported) {\n      localStorage.removeItem(key);\n    }\n  },\n};\n \n\nexport default LocalStorage;","import  React from 'react'\nimport debounce from 'lodash.debounce'\nimport { connect } from 'react-redux'\nimport { requestData, filterData, clearData } from '../actions/index'\n\nconst cities = {\n    \"Favourite\" : \"favourite\",\n    \"Kolkatta\" : 'kolkata',\n    \"Bangalore\" : 'bangalore',\n    \"Delhi\" : \"delhi\",\n    \"Mumbai\" : 'mumbai',\n    \"Chennai\" : \"chennai\"\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        filterData: filterTerm => dispatch(filterData(filterTerm)),\n        requestData: city => dispatch(requestData(city)),\n        clearData: () => dispatch(clearData())\n    }\n}\n\nclass ConnectedSearchBar extends React.Component {\n    state = {\n        city : \"\",\n        filterTerm : \"\",\n    }\n\n    changeOnDebounce = debounce(() => {\n        this.props.filterData(this.state.filterTerm)\n    }, 500)\n\n    handleChange = (event) => {\n        const { name, value } = event.target\n        this.setState({\n            [name] : value,\n        }, () => {\n            if (name === \"city\") {\n                if (this.state.city !== \"favourite\") this.props.requestData(this.state.city)\n                else this.props.clearData()\n            }\n            name === \"filterTerm\" && this.changeOnDebounce()\n        })\n    }\n\n    renderCityOptions = () => {\n        return Object.keys(cities).map(city => {\n            let cityValue = cities[city]\n            return <option value = {cityValue} key = {cityValue}>{city}</option>\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"form-row\">\n                    <div className=\"col\">\n                        <select\n                            className=\"custom-select\"\n                            value = {this.state.city}\n                            name = \"city\"\n                            onChange = {this.handleChange}\n                        >\n                            {this.renderCityOptions()}\n                        </select>\n                    </div>\n                    <div className=\"col\">\n                        <input\n                            className=\"form-control\"\n                            name = \"filterTerm\"\n                            value = {this.state.filterTerm}\n                            onChange = {this.handleChange}\n                            placeholder = \"Type to filter\"\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst SearchBar = connect(null, mapDispatchToProps) (ConnectedSearchBar)\n\nexport default SearchBar","import { FILTER_DATA, DATA_REQUESTED, PAGINATE_DATA, FAV_DATA, CLEAR_DATA, LOAD_FAV_DATA } from '../constants/action-types'\n\nexport function filterData(payload) {\n    return { type: FILTER_DATA, payload }\n}\n\nexport function requestData(payload) {\n    return { type: DATA_REQUESTED, payload }\n}\n\nexport function paginateData(payload) {\n    return { type: PAGINATE_DATA, payload }\n}\n\nexport function pushFavData(payload) {\n    return { type: FAV_DATA, payload }\n}\n\nexport function loadFavData(payload) {\n    return { type: LOAD_FAV_DATA , payload }\n}\n\nexport function clearData(payload) {\n    return { type: CLEAR_DATA }\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from 'react'\nimport LocalStorage from '../util/LocalStorage'\n\nimport { connect } from 'react-redux'\nimport { pushFavData } from '../actions/index'\n\n\nconst mapStateToProps = state => {\n    return { banks : state.dataToDisplay, favBanks: state.favData }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        pushFavData: favData => dispatch(pushFavData(favData)),\n    }\n}\n\nclass ConnectedList extends React.Component {\n    \n    isFavBank = (ifsc, favList) => {\n        if (!favList) return false\n        for (let i = 0; i < favList.length; i++) {\n            if (ifsc === favList[i].ifsc) return true\n        }\n        return false\n    }\n\n    handleClick = (event) => {\n        event.preventDefault()\n        const targetIfsc = event.target.id\n        let favListFromLS = JSON.parse(LocalStorage.getItem('favListOfBanks'))\n        const matchingBank = this.props.banks ? this.props.banks.filter( banks => targetIfsc === banks.ifsc) : []\n        if (matchingBank.length > 0) {\n            if (favListFromLS) {\n                if (!favListFromLS.some( bank => bank.ifsc === targetIfsc)) {\n                    favListFromLS.push(matchingBank[0])\n                }\n                else {\n                    let index = favListFromLS.findIndex(bank => bank.ifsc === targetIfsc) \n                    if (index > -1) {\n                        favListFromLS.splice(index, 1)\n                    }\n                }\n            } \n            else {\n                favListFromLS = matchingBank\n            }\n            this.props.pushFavData(favListFromLS)\n            const jsonString = JSON.stringify(favListFromLS)\n            LocalStorage.setItem('favListOfBanks', jsonString)\n        }\n    }\n\n\trenderBankList = (bankList, favList) => {\n\t\tconst classNameStringChecked = \"fa fa-heart checked\"\n        const classNameStringUnChecked = \"fa fa-heart\"\n        let toRender = [<div className=\"row header-row\">\n                            <div className=\"cold-xs-auto text-left\">Fav</div>\n                            <div className=\"col\">Bank Name</div>\n                            <div className=\"col\">IFSC Code</div>\n                            <div className=\"col\">Branch</div>\n                        </div>]\n        toRender.push(bankList.map( bank => {\n            if (this.isFavBank(bank.ifsc, favList)) {\n                return <div key = {bank.ifsc} className=\"row data-row\">\n                        <div className=\"col-xs-auto text-right\"><i className={classNameStringChecked} onClick={this.handleClick} id={bank.ifsc}></i></div>\n                        <div className=\"col\">{bank.name}</div>\n                        <div className=\"col\">{bank.ifsc}</div>\n                        <div className=\"col\">{bank.branch}</div>\n                    </div>\n            }\n            else {\n                return <div key = {bank.ifsc} className=\"row data-row\">\n                        <div className=\"col-xs-auto text-right\"><i className={classNameStringUnChecked} onClick={this.handleClick} id={bank.ifsc}></i></div>\n                        <div className=\"col\">{bank.name}</div>\n                        <div className=\"col\">{bank.ifsc}</div>\n                        <div className=\"col\">{bank.branch}</div>\n                    </div>\n            }\n        }))\n\n        return toRender\n\t}\n\n\trender() {\n        const { banks, favBanks } = this.props\n\t\treturn (\n\t\t\t\t<div className=\"container text-left data-container\">\n                    {\n                        banks ? this.renderBankList(banks, favBanks ? favBanks : \"\") : \"\"\n                    }\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nconst BanksList = connect(mapStateToProps, mapDispatchToProps)(ConnectedList)\n\nexport default BanksList","import React from 'react'\n\nimport debounce from 'lodash.debounce'\nimport { connect } from 'react-redux'\nimport ReactPaginate from 'react-paginate'\nimport { paginateData } from '../../actions/index'\n\nconst mapStateToProps = state => {\n    return { dataCount : state.filteredData.length }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        paginateData: (currentPage, itemsPerPage) => dispatch(paginateData({currentPage, itemsPerPage})),\n    }\n}\n\nclass ConnectedPaginate extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            itemsPerPage : 5\n        }\n        this.currentPage = 0\n    }\n\n    shouldComponentUpdate(nextProps) {\n        if (this.props.dataCount !== nextProps.dataCount) {\n            this.props.paginateData(this.currentPage, this.state.itemsPerPage)\n        }\n        return true\n    }\n    \n    changeOnDebounce = debounce(() => {\n        this.props.paginateData(this.currentPage, this.state.itemsPerPage)\n    }, 500)\n    \n    handleItemChange = event => {\n        const { value } = event.target\n        if (Number(value) > 0) {\n            this.setState({\n                itemsPerPage : Number(value)\n            }, () => this.changeOnDebounce())\n        }\n    }\n\n    handlePageClick = page => {\n        this.currentPage = page.selected\n        this.props.paginateData(this.currentPage, this.state.itemsPerPage)\n    }\n\n    render() {\n        const pageCount = Math.ceil(this.props.dataCount / this.state.itemsPerPage)\n\n        return (\n            <div className=\"\">\n                <div className = \"form-row\">\n                    <div className=\"col\">\n                        <input \n                            className=\"form-control\"\n                            name=\"itemPerPage\"\n                            value = {this.state.itemsPerPage}\n                            placeholder = \"Enter the number of items you want to see\"\n                            onChange = {this.handleItemChange}\n                        />\n                    </div>\n                    <div className=\"col total\">\n                        Total Results {this.props.dataCount}\n                    </div>\n                    <div className=\"col\">\n                        <ReactPaginate \n                            previousLabel = {\"<<Prev\"}\n                            nextLabel = {\"Next>>\"}\n                            breakLabel = {\"...\"}\n                            pageCount = {pageCount}\n                            marginPagesDisplayed = {1}\n                            pageRangeDisplayed = {3}\n                            onPageChange = {this.handlePageClick}\n                            containerClassName={'pagination justify-content-end'}\n                            breakClassName={'page-item'}\n                            breakLinkClassName={\"page-link\"}\n                            previousClassName={'page-item'}\n                            previousLinkClassName={\"page-link\"}\n                            nextClassName={'page-item'}\n                            nextLinkClassName={\"page-link\"}\n                            pageClassName={'page-item'}\n                            pageLinkClassName={'page-link'}\n                            activeClassName={'active'}\n                        />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst Paginate = connect(mapStateToProps, mapDispatchToProps)(ConnectedPaginate)\n\nexport default Paginate","import React from 'react';\nimport { connect } from 'react-redux'\nimport { loadFavData } from './actions/index'\nimport './App.css';\nimport localStorage from \"./util/LocalStorage\"\nimport SearchBar from './components/SearchBar'\nimport BanksList from './components/BanksList'\nimport Paginate from './components/Paginate/Paginate'\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n      loadFavData: favData => dispatch(loadFavData(favData)),\n  }\n}\n\nclass ConnectedApp extends React.Component {\n  state = {\n    favBanks : []\n  }\n\n  componentDidMount() {\n    const favListFromLS = JSON.parse(localStorage.getItem('favListOfBanks'))\n    if (favListFromLS) {\n      this.setState({\n        favBanks: favListFromLS\n      }, () => {\n        this.props.loadFavData(this.state.favBanks)\n      })\n    }\n    \n  }\n\n  render() {\n    return(\n      <main>\n        <div className=\"container text-center\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <h2>Search for Bank Details</h2>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <p>Select the city you want, and use the filter to search</p>\n            </div>\n          </div>\n          {/* {<div className=\"row\">\n            <div className=\"col info\">\n                <h4>Use multiple keywords in the search for filterring</h4>\n                <p>Key1 + Key2 will filter where the bank matches both Key1 & Key2 <br />(egs. SBI + DELHI will give you SBI branches in DELHI) <br />\n                Key1, Key2 will filter where the bank matches Key1 or Key2 <br />(egs. SBI, DELHI will give you SBI branches & all banks in DELHI) <br />\n              </p>\n            </div>\n          </div>} */}\n          <div className=\"row\">\n            <div className=\"col\">\n              <SearchBar />\n            </div>\n            <div className=\"col\">\n              <Paginate />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col\">\n              <BanksList />\n            </div>\n          </div>\n        </div>\n      </main>\n    )\n  }\n}\n\nconst App = connect(null, mapDispatchToProps)(ConnectedApp)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Provider store = {store}>\n    <App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}